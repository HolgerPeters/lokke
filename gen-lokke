#!./guile -s
!#

(setlocale LC_CTYPE "C")

(use-modules ((ice-9 match) #:select (match match-let))
             ((ice-9 pretty-print) #:select (pretty-print)))

;; We want the generated code to be auto-compilable in a "plain" guile
;; environment, i.e. without any load-pwth adjustments, so we (for
;; example) avoid (use-modules ((lokke main) ...)), etc.

(define (adjust-lib-path p)
  (if (zero? (string-length p))
      '(string-append (abspath (dirname (car (program-arguments))))
                      "/lib/.libs")
      p))

(define (adjust-mod-path p)
  (if (zero? (string-length p))
      '(string-append (abspath (dirname (car (program-arguments)))) "/mod")
      p))

(define (gen-lokke args main)
  ;; When lib-dir or mod-dir are "", find them relative to $0's parent dir
  (match-let (((guile lib-dir mod-dir) args))
    (format #t "#!~a -s\n" guile)
    (format #t "!#\n")
    (format #t
            "
;;; Copyright (C) 2019 Rob Browning <rlb@defaultvalue.org>
;;;
;;; This project is free software; you can redistribute it and/or
;;; modify it under the terms of (at your option) either of the
;;; following two licences:
;;;
;;;   1) The GNU Lesser General Public License as published by the
;;;      Free Software Foundation; either version 2.1, or (at your
;;;      option) any later version
;;;
;;;   2) The Eclipse Public License; either version 1.0 or (at your
;;;      option) any later version.

;;; Note: this file is automatically generated by gen-lokke

")
    (let* ((lib-dir (adjust-lib-path lib-dir))
           (mod-dir (adjust-mod-path mod-dir))
           (abspath (if (or (list? lib-dir) (list? mod-dir))
                        '((abspath
                           (let ((cwd (getcwd)))
                             (lambda (x)
                               (if (string-prefix? "/" x)
                                   x
                                   (string-append cwd "/" x))))))
                        '())))
      (pretty-print
       `(let* (,@abspath
               (mod-dir ,mod-dir)
               (lib-dir ,lib-dir))
          (primitive-load (string-append mod-dir "/lokke/sysenv.scm"))
          ((@ (lokke sysenv) prepare-environment) lib-dir mod-dir)
          (exit ,main))))
    (newline)
    (for-each display
              '(";; local variables:\n"
                ";; mode: scheme\n"
                ";; geiser-scheme-implementation: guile\n"
                ";; end:\n"))))

(match (program-arguments)
  ((gen "lokke" arg ...)
   (gen-lokke (cddr (program-arguments))
              '((@ (lokke main) lokke-main) (program-arguments))))
  ((gen "cljl" arg ...)
   (gen-lokke (cddr (program-arguments))
              '((@ (lokke main) cljl-main) #f (program-arguments))))
  ((gen "cljl-strict" arg ...)
   (gen-lokke (cddr (program-arguments))
              '((@ (lokke main) cljl-main) #t (program-arguments)))))

;; local variables:
;; mode: scheme
;; geiser-scheme-implementation: guile
;; end:
