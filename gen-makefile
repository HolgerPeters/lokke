#!/usr/bin/env guile
!#

;;; Copyright (C) 2020-2021 Rob Browning <rlb@defaultvalue.org>
;;; SPDX-License-Identifier: LGPL-2.1-or-later OR EPL-1.0+

(setlocale LC_CTYPE "C")

(use-modules
 ((ice-9 match) #:select (match-let))
 ((ice-9 popen) #:select (open-input-pipe))
 ((ice-9 pretty-print) #:select (pretty-print))
 ((ice-9 rdelim) #:select (read-line))
 ((ice-9 regex) #:select (regexp-substitute/global))
 ((ice-9 textual-ports) #:select (get-string-all))
 ((srfi srfi-1) #:select (append-map delete-duplicates drop-right)))

(define (usage port)
  (display "Usage: gen-makefile mod/.../some.clj mod/.../some.scm ...\n" port))

(define (misuse)
  (usage (current-error-port))
  (exit 2))

(define (lines port)
  (let loop ()
    (let ((l (read-line port)))
      (if (eof-object? l)
          '()
          (cons l (loop))))))

;; FIXME: clean this up

(define (autoconf-dir-var p)
  ;; Drop the filename
  (let ((dir-parts (drop-right (string-split p #\/) 1)))
    (string-append
     (format #f "moddata_~adir = $(moddatadir)/~a\n"
             (string-join dir-parts "_")
             (string-join (cdr dir-parts) "/"))
     (format #f "modlib_~adir = $(modlibdir)/~a"
             (string-join dir-parts "_")
             (string-join (cdr dir-parts) "/")))))

(define (autoconf-data-var p)
  ;; Drop the filename
  (let* ((dir-parts (drop-right (string-split p #\/) 1))
         (srcvar (format #f "moddata_~a_DATA" (string-join dir-parts "_"))))
    (string-append
     (format #f "~a =\n" srcvar)
     (format #f "modlib_~a_DATA =" (string-join dir-parts "_")))))

(define (autoconf-mod-data-files paths)
  ;; Drop the filename
  (map (lambda (p)
         (let ((dir-parts (drop-right (string-split p #\/) 1))
               (clj? (cond
                      ((string-suffix? ".clj" p) #t)
                      ((string-suffix? ".scm" p) #f)
                      (else (error "Unrecognized file extension:" p)))))
           (string-append
            (format #f "moddata_~a_DATA += ~a\n" (string-join dir-parts "_") p)
            (format #f "modlib_~a_DATA += ~a\n"
                    (string-join dir-parts "_")
                    (string-append (string-drop-right p 4) ".go")))))
       (sort paths string<?)))

;; For now, let's just be lazy about this (not in the clojure sense)...

(define (module-directives paths)
  (string-join
   (apply append
          (sort (delete-duplicates (map autoconf-dir-var paths))
                string<?)
          '("")
          (sort (delete-duplicates (map autoconf-data-var paths))
                string<?)
          '("")
          (autoconf-mod-data-files paths)
          '())
   "\n"))

(define (expand template module-paths)
  (regexp-substitute/global #f (make-regexp "# @MODULE_FILES@ #")
                            template
                            'pre (module-directives module-paths) 'post))

(define (gen-makefile args)
  (let* ((module-paths (sort (cdr args) string<?))
         (template (call-with-input-file "Makefile.am.in"
                     (lambda (in) (get-string-all in))))
         ;; FIXME: clean up on error...
         (tmp-name (string-copy "Makefile.am.XXXXXX"))
         (tmp (mkstemp! tmp-name)))
    (call-with-output-file "Makefile.am"
      (lambda (out) (display (expand template module-paths) out)))
    (delete-file tmp-name)))

(gen-makefile (program-arguments))
