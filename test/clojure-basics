#!./lokke -0 ;; -*-clojure-*-
!#

;;; Copyright (C) 2020 Rob Browning <rlb@defaultvalue.org>
;;;
;;; This project is free software; you can redistribute it and/or
;;; modify it under the terms of (at your option) either of the
;;; following two licences:
;;;
;;;   1) The GNU Lesser General Public License as published by the
;;;      Free Software Foundation; either version 2.1, or (at your
;;;      option) any later version
;;;
;;;   2) The Eclipse Public License; either version 1.0 or (at your
;;;      option) any later version.

(ns test.clojure-basics
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

(begin-tests (ns-name *ns*))

(testing "fn?"
  (is (not (fn? true)))
  (is (fn? (fn [] true))))

(testing "cond->"
  (is (= :yep (cond-> :yep)))
  (is (= :yep (cond-> :yep string? name)))
  (is (= "yep" (cond-> :yep keyword? name)))
  (is (= :yep (cond-> :yep keyword? name string? keyword)))
  (is (= "yep" (cond-> :yep keyword? name keyword? keyword)))
  (is (= "yep!" (cond-> "yep" string? (str "!")))))

(testing "cond->>"
  (is (= :yep (cond->> :yep)))
  (is (= :yep (cond->> :yep string? name)))
  (is (= "yep" (cond->> :yep keyword? name)))
  (is (= :yep (cond->> :yep keyword? name string? keyword)))
  (is (= "yep" (cond->> :yep keyword? name keyword? keyword)))
  (is (= "...yep" (cond->> "yep" string? (str "...")))))

(testing "condp"
  (is (= :yep (condp < 0 -1 :yep)))
  (is (= :nope (condp < 0 0 :yep :nope)))
  (is (= :yep (condp < 0 0 :nope -3 :yep)))
  (is (= :yep (condp < 0 0 :nope -3 :yep :nope)))
  (is (= true (condp < 0 0 :nope -3 :>> identity :nope))))

(testing "juxt"
  (is (= [1] ((juxt identity) 1)))
  (is (= [2 0] ((juxt inc dec) 1))))

(testing "some->"
  (is (= :yep (some-> :yep)))
  (is (= true (some-> :yep keyword?)))
  (is (= false (some-> :yep string?)))
  (is (= "yep!" (some-> "yep" (str "!")))))

(testing "some->>"
  (is (= :yep (some->> :yep)))
  (is (= true (some->> :yep keyword?)))
  (is (= false (some->> :yep string?)))
  (is (= "...yep" (some->> "yep" (str "...")))))

(testing "sort"
  ;; FIXME: test stability
  (is (= [1 2 3 4 5] (sort '(1 2 3 4 5))))
  (is (= [1 2 3 4 5] (sort '(5 2 1 4 3))))
  (is (= [1 2 3 4 5] (sort [1 2 3 4 5])))
  (is (= [1 2 3 4 5] (sort [5 2 1 4 3])))
  (is (= [2 2 3 4 5] (sort [5 2 2 4 3]))))

(testing "time"
  (let [out (with-out-str (time true))]
    (is (re-matches (re-pattern "\"Elapsed time: \\d+\\.\\d+ msecs\"\\n")
                    out)))
  (is (= :yep (time :yep))))

(testing "trampoline"
  (let [bouncer (fn bouncer [n]
                  (if (pos? n)
                    (fn [] (bouncer (dec n)))
                    (fn [] :tired)))]
    (is (= :tired (trampoline (bouncer 0))))
    (is (= :tired (trampoline (bouncer 1))))
    (is (= :tired (trampoline (bouncer 2))))))

(end-tests (ns-name *ns*) :exit? true)
