#!./lokke --#!
-i :this -- :args ;; -*-clojure-*-
!#

;;; Copyright (C) 2019 Rob Browning <rlb@defaultvalue.org>
;;;
;;; This project is free software; you can redistribute it and/or
;;; modify it under the terms of (at your option) either of the
;;; following two licences:
;;;
;;;   1) The GNU Lesser General Public License as published by the
;;;      Free Software Foundation; either version 2.1, or (at your
;;;      option) any later version
;;;
;;;   2) The Eclipse Public License; either version 1.0 or (at your
;;;      option) any later version.

(ns test.clojure-ns
  (:require
   [clojure.string :as str]
   [guile.guile :refer [module-public-interface module-variable]])
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))

(begin-tests (ns-name *ns*))

(is (= 'test.clojure-ns (ns-name *ns*)))
(is (= clojure.string/join str/join))

(ns test-ns-behavior-simple
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))
;; FIXME: why does this cause the tests to crash?
;;(require '[clojure.test :refer [begin-tests end-tests is testing]])
(is (= 'test-ns-behavior-simple (ns-name *ns*)))
(prn (meta *ns*))
(is (= nil (meta *ns*)))
(ns test.clojure-ns)

(ns test-ns-behavior-doc
  "doc"
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))
(is (= 'test-ns-behavior-doc (ns-name *ns*)))
(is (= {:doc "doc"} (meta *ns*)))
(ns test.clojure-ns)

(ns test-ns-behavior-attr
  {:x 1}
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))
(is (= 'test-ns-behavior-attr (ns-name *ns*)))
(is (= {:x 1} (meta *ns*)))
(ns test.clojure-ns)

(ns test-ns-behavior-doc-and-attr
  "doc"
  {:x 1}
  (:require
   [clojure.test :refer [begin-tests end-tests is testing]]))
(is (= 'test-ns-behavior-doc-and-attr (ns-name *ns*)))
(is (= {:doc "doc" :x 1} (meta *ns*)))
(ns test.clojure-ns)


(ns test-def-private)
(def yep true)
(def yep-doc "doc" true)
(def- nope true)
(def- nope-doc "doc" true)
(def ^:private nope-key true)
(def ^{:private true} nope-map true)
(defn yepfn [] true)
(defn- nopefn [] true)
(ns test.clojure-ns)

(let [mod (find-ns 'test-def-private)
      public? (fn [m sym] (module-variable (module-public-interface m) sym))]
  (is (public? mod 'yep))
  (is (public? mod 'yep-doc))
  (is (public? mod 'yepfn))
  (is (not (public? mod 'nope)))
  (is (not (public? mod 'nope-doc)))
  (is (not (public? mod 'nope-key)))
  (is (not (public? mod 'nope-map)))
  (is (not (public? mod 'nopefn))))

(end-tests (ns-name *ns*) :exit? true)
