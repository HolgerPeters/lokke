.\" The macros used below are those described in groff_man(7)
.
.TH lokke 1 2020-04-11 "0.0.1"
.
.SH NAME
lokke \- a Clojure dialect for Guile
.
.SH SYNOPSIS
.SY lokke
.RB ( help | \-\-help | \-h | \-? )
.YS
.SY lokke
.B repl
.YS
.SY lokke
.B clj
.OP \-i file
.OP \-e code
.RB [ CLJ_OPTION
\&.\|.\|.\&]
.RB [ \-\- ]
.B COMMAND_LINE_ARG
\&.\|.\|.
.YS
.SY lokke
.B \-\-!#
.YS
.SY cljl
.RB ( help | \-\-help | \-h | \-? )
.YS
.SY cljl
.OP \-i file
.OP \-e code
.RB [ CLJ_OPTION
\&.\|.\|.\&]
.RB [ \-\- ]
.B COMMAND_LINE_ARG
\&.\|.\|.
.YS
.SY cljl-strict
.RB ( help | \-\-help | \-h | \-? )
.YS
.SY cljl-strict
.OP \-i file
.OP \-e code
.RB [ CLJ_OPTION
\&.\|.\|.\&]
.RB [ \-\- ]
.B COMMAND_LINE_ARG
\&.\|.\|.
.YS
.
.SH DESCRIPTION
Lokke is a Clojure dialect for Guile, and may be invoked in three
ways.
.B lokke
is the most general command, acting as specified by an initial
subcommand argument (e.g.
.BR repl ,
.BR clj ,
etc.).  The
.B cljl
and
.B cljl-strict
commands
behave exactly as if
.B lokke clj
had been invoked with the same arguments.
.B cljl-strict
also acts as if
.B --strict
had been included in the arguments.
.P
When no arguments are provided to
.B cljl
or
.B cljl-strict
they present a Read-Eval-Print-Loop (REPL) on the terminal for
interactive use.
.P
The
.BR COMMAND_LINE_ARGs
will be available via
.B *command-line-args*
in Clojure, and when specified
.B \-\-
causes all subsequent arguments to be interpreted solely as
.BR COMMAND_LINE_ARG s.
.P
The
.B \-!#
option allows lokke to act as a script interpreter.  See
.B SCRIPT EVALUATION
below for additional information.
.P
In general,
.B cljl
is intended for convenient interactive use,
.B cljl-strict
is intended for situations where
.B lokke
needs to match the JVM
.B clj
tool's behavior more closely, say to attempt to stand in for the JVM
.B clojure
tool in #!/usr/bin/clojure scripts, and
.B lokke --!#
should be preferred for most #! invocations (when portability isn't a
primary concern).
.P
Note that as yet
.B lokke
doesn't provide anything like the JVM's distinction between the
.B clj
and
.B clojure
commands because it appears that the distintion is just between
whether or not readline support is available, and Guile provides that
for
.B lokke.
See
.B READLINE SUPPORT
below.
.
.SH HELP
.TP
.BI help\fR,\ \fB\-\-help\fR,\ \fB\-h\fR,\ \fB\-?
Show help and exit.
.
.SH CLJ_OPTION
.TP
.BI \-i " file" \fR,\ \fB\-\-init " file"
Execute code in file.
.TP
.BI \-e " code" \fR,\ \fB\-\-eval " code"
Evaluate code, printing any values that are not nil or unspecified.
.TP
.B \-\-strict
Provide stricter compatibility with JVM
.B clojure/clj
options.  Treat
.B \-\-
as a normal argument.
.
.SH SCRIPT EVALUATION
In most cases, lokke scripts should begin like this:
.P
.RS
.EX
#!/path/to/lokke-0.0 --!#
;; Place any additional lokke arguments as (roughly) EDN here.
;; For the typical case:
-i :this -- :args
!#
;; Place your Clojure code here, after the !#
(prn :hello-world)
\&.\|.\|.\&
.EE
.RE
.P
The
.B \-\-!#
argument will be replaced by the arguments in the "EDN" section, each
of which must be a string, symbol, number, boolean, or nil, or one of
the keywords
.B :this
or
.B :args.
.P
Symbol, number, boolean, or nil arguments will be converted to
strings,
.B :this
will be replaced with the path to the script itself (i.e. $0 in sh),
and
.B :args
will be replaced with all of the arguments provided to the invocation
of the script, (i.e. $@ in sh).  Without any EDN arguments, lokke will
present a REPL.  That is, lokke will not actually run the script if
not requested by
.B -i :this
or the equivalent.
.P
Note that the EDN argument text will begin with the character
immediately after the exclamation point in
.B \-\-#!
no matter what it is (i.e. even if it is not whitespace).
.P
Among other reasons, this approach has been chosen for portability
since the semantics and flexibility of #! directives varies across
platforms.
.P
At the moment lokke is not a binary executable.  If the system
requires #! interpreters to be binary executables, or if you'd like to
locate lokke via the current PATH, you may be able to rely on env like
this:
.P
.RS
.EX
#!/usr/bin/env lokke-0.0 --!#
\&.\|.\|.\&
.EE
.RE
.
.SH READLINE SUPPORT
Assuming your guile was compiled with readline support, it's likely
you'll want to add something like this to
.B ~/.lokke_guile
to enable it in the REPL:
.P
.RS
.EX
;;; -*-scheme-*-
(use-modules (ice-9 readline))
(activate-readline)
.EE
.RE
.
.SH ENVIRONMENT
.TP
.B LOKKE_HISTORY
When set, specifies the path to the REPL history file.  When not set,
defaults to
.B $XDG_CACHE_HOME/lokke/history
when
.B XDG_CACHE_HOME
is set, otherwise
.BR $HOME/.cache/lokke/history .
.
.SH SEE ALSO
.
.IR guile (1),
and for much more detail, the guile info pages (perhaps via M-x info
in emacs, or "info guile")
.P
.UR https://github.com/edn-format/edn
Extensible Data Notataion (EDN)
.UE
.AUTHORS
